package ua.kpi.ip31.jee.gunawardana.repository;

import ua.kpi.ip31.jee.gunawardana.model.Comics;

import java.util.List;
import java.util.Optional;

/**
 * Repository grants access to {@link Comics} persistent storage.
 *
 * @author Ruslan Gunawardana
 */
public interface ComicsRepository {
    /**
     * Finds one comics with the given id.
     *
     * @param id identifier of the searched comics
     * @return the searched comics with the given id
     */
    Optional<Comics> findById(long id);

    /**
     * Finds all comics in the database.
     *
     * @return list of all persisted comics
     */
    List<Comics> findAll();

    /**
     * Finds all comics that share the given publisher.
     *
     * @param publisher search criteria is a name of the publisher
     * @return list of all comics that share the given publisher
     */
    List<Comics> findByPublisher(String publisher);

    /**
     * Saves comics instance in the persistence storage.
     * Ignores {@link Comics#getId()} value.
     * Returns instance, that has {@link Comics#getId()} updated.
     * It is generated by persistence storage.
     *
     * @param comics instance to be saved
     * @return new object with initialised {@link Comics#getId()}
     */
    Comics save(Comics comics);

    /**
     * Updates {@link Comics} in the persistent storage.
     * The persisted comics object to be updated is found by {@link Comics#getId()}.
     *
     * @param comics the comics to be updated
     */
    void update(Comics comics);

    /**
     * Deletes all comics from the persistent storage.
     */
    void deleteAll();
}
